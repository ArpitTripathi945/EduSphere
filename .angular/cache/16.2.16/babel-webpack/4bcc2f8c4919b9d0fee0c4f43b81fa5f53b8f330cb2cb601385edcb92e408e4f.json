{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nfunction RegisterComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Full name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Enter a valid Gmail address. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Must be 8+ chars, include upper, lower, number, and special character. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1, \" Passwords do not match. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class RegisterComponent {\n  constructor(fb, router) {\n    this.fb = fb;\n    this.router = router;\n    this.registerForm = this.fb.group({\n      fullname: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email, Validators.pattern(/^[^ ]+@gmail\\.com$/)]],\n      password: ['', [Validators.required, Validators.minLength(8), Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_])[A-Za-z\\d\\W_]{8,}$/)]],\n      confirmPassword: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    const {\n      fullname,\n      email,\n      password,\n      confirmPassword\n    } = this.registerForm.value;\n    if (password !== confirmPassword) {\n      this.registerForm.get('confirmPassword')?.setErrors({\n        mismatch: true\n      });\n      return;\n    }\n    if (this.registerForm.valid) {\n      const loggedInUser = {\n        fullname,\n        email,\n        password\n      };\n      localStorage.setItem('loggedInUser', JSON.stringify(loggedInUser));\n      this.router.navigate(['/login']);\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n  static {\n    this.ɵfac = function RegisterComponent_Factory(t) {\n      return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 31,\n      vars: 5,\n      consts: [[1, \"d-flex\", \"justify-content-center\", \"align-items-center\", \"min-vh-100\", \"bg-light\"], [1, \"card\", \"shadow\", \"p-4\", \"col-md-5\", \"bg-white\"], [1, \"text-center\", \"text-primary\", \"fw-bold\", \"mb-4\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-2\"], [\"for\", \"fullname\", 1, \"form-label\"], [\"id\", \"fullname\", \"type\", \"text\", \"formControlName\", \"fullname\", 1, \"form-control\"], [\"class\", \"invalid-feedback d-block\", 4, \"ngIf\"], [\"for\", \"email\", 1, \"form-label\"], [\"id\", \"email\", \"type\", \"email\", \"formControlName\", \"email\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [\"id\", \"password\", \"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"for\", \"confirmPassword\", 1, \"form-label\"], [\"id\", \"confirmPassword\", \"type\", \"password\", \"formControlName\", \"confirmPassword\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"w-100\"], [1, \"text-center\", \"mt-3\"], [\"routerLink\", \"/login\"], [1, \"invalid-feedback\", \"d-block\"]],\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h3\", 2);\n          i0.ɵɵtext(3, \"Create Account\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"form\", 3);\n          i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_4_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"label\", 5);\n          i0.ɵɵtext(7, \"Full Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(8, \"input\", 6);\n          i0.ɵɵtemplate(9, RegisterComponent_div_9_Template, 2, 0, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 4)(11, \"label\", 8);\n          i0.ɵɵtext(12, \"Email address\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(13, \"input\", 9);\n          i0.ɵɵtemplate(14, RegisterComponent_div_14_Template, 2, 0, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"div\", 4)(16, \"label\", 10);\n          i0.ɵɵtext(17, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(18, \"input\", 11);\n          i0.ɵɵtemplate(19, RegisterComponent_div_19_Template, 2, 0, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(20, \"div\", 4)(21, \"label\", 12);\n          i0.ɵɵtext(22, \"Confirm Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(23, \"input\", 13);\n          i0.ɵɵtemplate(24, RegisterComponent_div_24_Template, 2, 0, \"div\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"button\", 14);\n          i0.ɵɵtext(26, \"Register\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(27, \"div\", 15);\n          i0.ɵɵtext(28, \" Already have an account? \");\n          i0.ɵɵelementStart(29, \"a\", 16);\n          i0.ɵɵtext(30, \"Login here\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          let tmp_2_0;\n          let tmp_3_0;\n          let tmp_4_0;\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registerForm.get(\"fullname\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.registerForm.get(\"fullname\")) == null ? null : tmp_1_0.invalid));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.touched) && ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.invalid));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_3_0.touched) && ((tmp_3_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_3_0.invalid));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_4_0.touched) && ((tmp_4_0 = ctx.registerForm.get(\"confirmPassword\")) == null ? null : tmp_4_0.errors == null ? null : tmp_4_0.errors[\"mismatch\"]));\n        }\n      },\n      dependencies: [i3.NgIf, i2.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","RegisterComponent","constructor","fb","router","registerForm","group","fullname","required","email","pattern","password","minLength","confirmPassword","onSubmit","value","get","setErrors","mismatch","valid","loggedInUser","localStorage","setItem","JSON","stringify","navigate","markAllAsTouched","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_4_listener","ɵɵelement","ɵɵtemplate","RegisterComponent_div_9_Template","RegisterComponent_div_14_Template","RegisterComponent_div_19_Template","RegisterComponent_div_24_Template","ɵɵadvance","ɵɵproperty","tmp_1_0","touched","invalid","tmp_2_0","tmp_3_0","tmp_4_0","errors"],"sources":["C:\\Users\\Windows\\EduSphere\\src\\app\\auth\\register\\register.component.ts","C:\\Users\\Windows\\EduSphere\\src\\app\\auth\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css']\r\n})\r\nexport class RegisterComponent {\r\n\r\n  registerForm = this.fb.group({\r\n    fullname: ['', Validators.required],\r\n    email: ['', [Validators.required, Validators.email, Validators.pattern(/^[^ ]+@gmail\\.com$/)]],\r\n    password: ['', [\r\n      Validators.required,\r\n      Validators.minLength(8),\r\n      Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[\\W_])[A-Za-z\\d\\W_]{8,}$/)\r\n    ]],\r\n    confirmPassword: ['', Validators.required]\r\n  });\r\n\r\n  constructor(private fb: FormBuilder, private router: Router) {}\r\n\r\n  onSubmit() {\r\n    const {  fullname, email, password, confirmPassword } = this.registerForm.value;\r\n    if (password !== confirmPassword) {\r\n      this.registerForm.get('confirmPassword')?.setErrors({ mismatch: true });\r\n      return;\r\n    }\r\n\r\n     if (this.registerForm.valid) {\r\n      const loggedInUser = { fullname, email, password };\r\n      localStorage.setItem('loggedInUser', JSON.stringify(loggedInUser));\r\n      this.router.navigate(['/login']);\r\n    } else {\r\n      this.registerForm.markAllAsTouched();\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"d-flex justify-content-center align-items-center min-vh-100 bg-light\">\r\n  <div class=\"card shadow p-4 col-md-5 bg-white\">\r\n    <h3 class=\"text-center text-primary fw-bold mb-4\">Create Account</h3>\r\n\r\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"mb-2\">\r\n        <label for=\"fullname\" class=\"form-label\">Full Name</label>\r\n        <input id=\"fullname\" type=\"text\" class=\"form-control\" formControlName=\"fullname\" />\r\n        <div class=\"invalid-feedback d-block\" *ngIf=\"registerForm.get('fullname')?.touched && registerForm.get('fullname')?.invalid\">\r\n          Full name is required.\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"mb-2\">\r\n        <label for=\"email\" class=\"form-label\">Email address</label>\r\n        <input id=\"email\" type=\"email\" class=\"form-control\" formControlName=\"email\" />\r\n        <div class=\"invalid-feedback d-block\" *ngIf=\"registerForm.get('email')?.touched && registerForm.get('email')?.invalid\">\r\n          Enter a valid Gmail address.\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"mb-2\">\r\n        <label for=\"password\" class=\"form-label\">Password</label>\r\n        <input id=\"password\" type=\"password\" class=\"form-control\" formControlName=\"password\" />\r\n        <div class=\"invalid-feedback d-block\" *ngIf=\"registerForm.get('password')?.touched && registerForm.get('password')?.invalid\">\r\n          Must be 8+ chars, include upper, lower, number, and special character.\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"mb-2\">\r\n        <label for=\"confirmPassword\" class=\"form-label\">Confirm Password</label>\r\n        <input id=\"confirmPassword\" type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\" />\r\n        <div class=\"invalid-feedback d-block\" *ngIf=\"registerForm.get('confirmPassword')?.touched && registerForm.get('confirmPassword')?.errors?.['mismatch']\">\r\n          Passwords do not match.\r\n        </div>\r\n      </div>\r\n\r\n      <button type=\"submit\" class=\"btn btn-primary w-100\">Register</button>\r\n    </form>\r\n\r\n    <div class=\"text-center mt-3\">\r\n      Already have an account? <a routerLink=\"/login\">Login here</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n"],"mappings":"AACA,SAAsBA,UAAU,QAAQ,gBAAgB;;;;;;;ICOhDC,EAAA,CAAAC,cAAA,cAA6H;IAC3HD,EAAA,CAAAE,MAAA,+BACF;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAMNH,EAAA,CAAAC,cAAA,cAAuH;IACrHD,EAAA,CAAAE,MAAA,qCACF;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAMNH,EAAA,CAAAC,cAAA,cAA6H;IAC3HD,EAAA,CAAAE,MAAA,+EACF;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;;IAMNH,EAAA,CAAAC,cAAA,cAAwJ;IACtJD,EAAA,CAAAE,MAAA,gCACF;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;ADzBd,OAAM,MAAOC,iBAAiB;EAa5BC,YAAoBC,EAAe,EAAUC,MAAc;IAAvC,KAAAD,EAAE,GAAFA,EAAE;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAXnD,KAAAC,YAAY,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MAC3BC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MACnCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,KAAK,EAAEb,UAAU,CAACc,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;MAC9FC,QAAQ,EAAE,CAAC,EAAE,EAAE,CACbf,UAAU,CAACY,QAAQ,EACnBZ,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,EACvBhB,UAAU,CAACc,OAAO,CAAC,8DAA8D,CAAC,CACnF,CAAC;MACFG,eAAe,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACY,QAAQ;KAC1C,CAAC;EAE4D;EAE9DM,QAAQA,CAAA;IACN,MAAM;MAAGP,QAAQ;MAAEE,KAAK;MAAEE,QAAQ;MAAEE;IAAe,CAAE,GAAG,IAAI,CAACR,YAAY,CAACU,KAAK;IAC/E,IAAIJ,QAAQ,KAAKE,eAAe,EAAE;MAChC,IAAI,CAACR,YAAY,CAACW,GAAG,CAAC,iBAAiB,CAAC,EAAEC,SAAS,CAAC;QAAEC,QAAQ,EAAE;MAAI,CAAE,CAAC;MACvE;;IAGD,IAAI,IAAI,CAACb,YAAY,CAACc,KAAK,EAAE;MAC5B,MAAMC,YAAY,GAAG;QAAEb,QAAQ;QAAEE,KAAK;QAAEE;MAAQ,CAAE;MAClDU,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEC,IAAI,CAACC,SAAS,CAACJ,YAAY,CAAC,CAAC;MAClE,IAAI,CAAChB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;KACjC,MAAM;MACL,IAAI,CAACpB,YAAY,CAACqB,gBAAgB,EAAE;;EAExC;;;uBA7BWzB,iBAAiB,EAAAJ,EAAA,CAAA8B,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAhC,EAAA,CAAA8B,iBAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;YAAjB9B,iBAAiB;MAAA+B,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCT9BzC,EAAA,CAAAC,cAAA,aAAkF;UAE5BD,EAAA,CAAAE,MAAA,qBAAc;UAAAF,EAAA,CAAAG,YAAA,EAAK;UAErEH,EAAA,CAAAC,cAAA,cAAyD;UAAxBD,EAAA,CAAA2C,UAAA,sBAAAC,oDAAA;YAAA,OAAYF,GAAA,CAAAzB,QAAA,EAAU;UAAA,EAAC;UACtDjB,EAAA,CAAAC,cAAA,aAAkB;UACyBD,EAAA,CAAAE,MAAA,gBAAS;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UAC1DH,EAAA,CAAA6C,SAAA,eAAmF;UACnF7C,EAAA,CAAA8C,UAAA,IAAAC,gCAAA,iBAEM;UACR/C,EAAA,CAAAG,YAAA,EAAM;UAENH,EAAA,CAAAC,cAAA,cAAkB;UACsBD,EAAA,CAAAE,MAAA,qBAAa;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UAC3DH,EAAA,CAAA6C,SAAA,gBAA8E;UAC9E7C,EAAA,CAAA8C,UAAA,KAAAE,iCAAA,iBAEM;UACRhD,EAAA,CAAAG,YAAA,EAAM;UAENH,EAAA,CAAAC,cAAA,cAAkB;UACyBD,EAAA,CAAAE,MAAA,gBAAQ;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UACzDH,EAAA,CAAA6C,SAAA,iBAAuF;UACvF7C,EAAA,CAAA8C,UAAA,KAAAG,iCAAA,iBAEM;UACRjD,EAAA,CAAAG,YAAA,EAAM;UAENH,EAAA,CAAAC,cAAA,cAAkB;UACgCD,EAAA,CAAAE,MAAA,wBAAgB;UAAAF,EAAA,CAAAG,YAAA,EAAQ;UACxEH,EAAA,CAAA6C,SAAA,iBAAqG;UACrG7C,EAAA,CAAA8C,UAAA,KAAAI,iCAAA,iBAEM;UACRlD,EAAA,CAAAG,YAAA,EAAM;UAENH,EAAA,CAAAC,cAAA,kBAAoD;UAAAD,EAAA,CAAAE,MAAA,gBAAQ;UAAAF,EAAA,CAAAG,YAAA,EAAS;UAGvEH,EAAA,CAAAC,cAAA,eAA8B;UAC5BD,EAAA,CAAAE,MAAA,kCAAyB;UAAAF,EAAA,CAAAC,cAAA,aAAuB;UAAAD,EAAA,CAAAE,MAAA,kBAAU;UAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;;;UArC1DH,EAAA,CAAAmD,SAAA,GAA0B;UAA1BnD,EAAA,CAAAoD,UAAA,cAAAV,GAAA,CAAAlC,YAAA,CAA0B;UAIWR,EAAA,CAAAmD,SAAA,GAAoF;UAApFnD,EAAA,CAAAoD,UAAA,WAAAC,OAAA,GAAAX,GAAA,CAAAlC,YAAA,CAAAW,GAAA,+BAAAkC,OAAA,CAAAC,OAAA,OAAAD,OAAA,GAAAX,GAAA,CAAAlC,YAAA,CAAAW,GAAA,+BAAAkC,OAAA,CAAAE,OAAA,EAAoF;UAQpFvD,EAAA,CAAAmD,SAAA,GAA8E;UAA9EnD,EAAA,CAAAoD,UAAA,WAAAI,OAAA,GAAAd,GAAA,CAAAlC,YAAA,CAAAW,GAAA,4BAAAqC,OAAA,CAAAF,OAAA,OAAAE,OAAA,GAAAd,GAAA,CAAAlC,YAAA,CAAAW,GAAA,4BAAAqC,OAAA,CAAAD,OAAA,EAA8E;UAQ9EvD,EAAA,CAAAmD,SAAA,GAAoF;UAApFnD,EAAA,CAAAoD,UAAA,WAAAK,OAAA,GAAAf,GAAA,CAAAlC,YAAA,CAAAW,GAAA,+BAAAsC,OAAA,CAAAH,OAAA,OAAAG,OAAA,GAAAf,GAAA,CAAAlC,YAAA,CAAAW,GAAA,+BAAAsC,OAAA,CAAAF,OAAA,EAAoF;UAQpFvD,EAAA,CAAAmD,SAAA,GAA+G;UAA/GnD,EAAA,CAAAoD,UAAA,WAAAM,OAAA,GAAAhB,GAAA,CAAAlC,YAAA,CAAAW,GAAA,sCAAAuC,OAAA,CAAAJ,OAAA,OAAAI,OAAA,GAAAhB,GAAA,CAAAlC,YAAA,CAAAW,GAAA,sCAAAuC,OAAA,CAAAC,MAAA,kBAAAD,OAAA,CAAAC,MAAA,cAA+G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}